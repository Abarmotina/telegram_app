async function fetchWalletsList() {
    try {
        const response = await fetch("https://raw.githubusercontent.com/ton-blockchain/wallets-list/main/wallets.json");
        if (!response.ok) throw new Error(`Failed to load wallets list: ${response.status}`);

        const rawWallets = await response.json();
        console.log("–û—Ç—Ä–∏–º–∞–Ω–∏–π —Å–ø–∏—Å–æ–∫ –≥–∞–º–∞–Ω—Ü—ñ–≤ (–æ—Ä–∏–≥—ñ–Ω–∞–ª):", rawWallets);

        // üîπ –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ —Å–ø–∏—Å–æ–∫ —É –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç
        const formattedWallets = rawWallets.map(wallet => ({
            name: wallet.name || wallet.app_name, // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ name –∞–±–æ app_name
            image: wallet.image,
            about: wallet.about || "No description available",
            homepage: wallet.homepage || "https://ton.org",
            bridge: wallet.bridge || "https://bridge.tonapi.io/bridge"
        }));

        console.log("–§—ñ–Ω–∞–ª—å–Ω–∏–π —Å–ø–∏—Å–æ–∫ –≥–∞–º–∞–Ω—Ü—ñ–≤ –ø–µ—Ä–µ–¥ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—î—é:", formattedWallets);
        return formattedWallets;
    } catch (error) {
        console.error("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É –≥–∞–º–∞–Ω—Ü—ñ–≤:", error);
        return [];
    }
}

async function initTonConnect() {
    while (!window.TonConnectSDK) {
        console.log("–û—á—ñ–∫—É—î–º–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è TonConnectSDK...");
        await new Promise(resolve => setTimeout(resolve, 100));
    }

    console.log("TonConnectSDK –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ, —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ TonConnect...");

    let walletsList = await fetchWalletsList();

    if (!walletsList || walletsList.length === 0) {
        console.error("–°–ø–∏—Å–æ–∫ –≥–∞–º–∞–Ω—Ü—ñ–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π! –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ä–µ–∑–µ—Ä–≤–Ω–∏–π —Å–ø–∏—Å–æ–∫.");
        walletsList = fallbackWallets; // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ä–µ–∑–µ—Ä–≤–Ω–∏–π —Å–ø–∏—Å–æ–∫
    }

    console.log("–ü–µ—Ä–µ–¥–∞—î–º–æ –≤ TonConnect –Ω–∞—Å—Ç—É–ø–Ω–∏–π —Å–ø–∏—Å–æ–∫ –≥–∞–º–∞–Ω—Ü—ñ–≤:", walletsList);

    const tonConnect = new window.TonConnectSDK.TonConnect({
        manifestUrl: "https://Abarmotina.github.io/telegram_app/tonconnect-manifest.json",
        walletsList: walletsList
    });

    window.tonConnect = tonConnect;
    console.log("TonConnect —É—Å–ø—ñ—à–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ!");
}

initTonConnect();

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –≥–∞–º–∞–Ω—Ü—è
async function connectWallet() {
    try {
        const wallets = await tonConnect.getWallets();
        if (wallets.length === 0) {
            alert("–ì–∞–º–∞–Ω—Ü—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ. –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å Tonkeeper –∞–±–æ —ñ–Ω—à–∏–π –ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω–∏–π –≥–∞–º–∞–Ω–µ—Ü—å.");
            return;
        }

        // –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ –¥—ñ–∞–ª–æ–≥ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
        await tonConnect.connect(wallets[0].universalLink);

        console.log("–ì–∞–º–∞–Ω–µ—Ü—å –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ:", tonConnect.account);
    } catch (error) {
        console.error("–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –≥–∞–º–∞–Ω—Ü—è:", error);
    }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –≥–∞–º–∞–Ω—Ü—è
async function checkWalletConnection() {
    const account = tonConnect.account;
    if (account) {
        console.log("–ì–∞–º–∞–Ω–µ—Ü—å –≤–∂–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ:", account);
    } else {
        console.log("–ì–∞–º–∞–Ω–µ—Ü—å –Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ");
    }
}

// –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—ó
export { connectWallet, checkWalletConnection };