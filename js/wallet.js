// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ TonWeb –¥–ª—è mainnet
const tonweb = new TonWeb();

let wallet;
let userAddress = null;

// **–§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –≥–∞–º–∞–Ω—Ü—è**
export async function connectWallet() {
    try {
        // **–ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ Telegram Web App**
        if (!window.Telegram || !window.Telegram.WebApp) {
            console.error("‚ùå Telegram Web App –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ!");
            return;
        }

        if (!window.Telegram.WebApp.initDataUnsafe?.user) {
            console.error("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π —É Telegram Web App!");
            return;
        }

        // –û—Ç—Ä–∏–º—É—î–º–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ Telegram (–≤—ñ–Ω –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—É–±–ª—ñ—á–Ω–æ–≥–æ –∫–ª—é—á–∞)
        const tgUserId = window.Telegram.WebApp.initDataUnsafe.user.id;
        console.log("‚úÖ Telegram Web App —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ. ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:", tgUserId);

        // **–ó–∞–ø–∏—Ç—É—î–º–æ –ø—É–±–ª—ñ—á–Ω–∏–π –∫–ª—é—á –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞**
        const publicKey = await getPublicKeyFromTelegram(tgUserId);
        if (!publicKey) {
            console.error("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø—É–±–ª—ñ—á–Ω–∏–π –∫–ª—é—á Telegram Wallet!");
            return;
        }

        // **–°—Ç–≤–æ—Ä—é—î–º–æ –æ–±'—î–∫—Ç –≥–∞–º–∞–Ω—Ü—è**
        wallet = new tonweb.wallet.all.v4({
            publicKey: TonWeb.utils.hexToBytes(publicKey),
            workchain: 0
        });

        userAddress = await wallet.getAddress();
        console.log("‚úÖ Telegram Wallet –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ! –ê–¥—Ä–µ—Å–∞:", userAddress.toString(true, true, true));
    } catch (error) {
        console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –≥–∞–º–∞–Ω—Ü—è:", error);
    }
}

// **–§–µ–π–∫–æ–≤–∏–π –º–µ—Ç–æ–¥ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—É–±–ª—ñ—á–Ω–æ–≥–æ –∫–ª—é—á–∞ (–¥–ª—è —Ç–µ—Å—Ç—É)**
async function getPublicKeyFromTelegram(userId) {
    // üö® –í–ê–ñ–õ–ò–í–û: –£ —Ä–µ–∞–ª—å–Ω–æ–º—É –≤–∏–ø–∞–¥–∫—É —Ü–µ–π –∫–ª—é—á –º–∞—î –±—É—Ç–∏ –æ—Ç—Ä–∏–º–∞–Ω–∏–π —á–µ—Ä–µ–∑ API Telegram Wallet
    return "7a28e34d4b1b654d5db2d5b5b68d..." // üî¥ –§–µ–π–∫–æ–≤–∏–π –ø—É–±–ª—ñ—á–Ω–∏–π –∫–ª—é—á (–∑–∞–º—ñ–Ω–∏—Ç–∏ –Ω–∞ API-–∑–∞–ø–∏—Ç)
}

// **–û—Ç—Ä–∏–º–∞—Ç–∏ –±–∞–ª–∞–Ω—Å –≥–∞–º–∞–Ω—Ü—è**
export async function getWalletBalance() {
    if (!wallet || !userAddress) {
        console.error("‚ùå –ì–∞–º–∞–Ω–µ—Ü—å –Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ!");
        return null;
    }

    try {
        const balance = await tonweb.getBalance(userAddress);
        console.log("üí∞ –ë–∞–ª–∞–Ω—Å –≥–∞–º–∞–Ω—Ü—è:", TonWeb.utils.fromNano(balance), "TON");
        return TonWeb.utils.fromNano(balance);
    } catch (error) {
        console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É:", error);
        return null;
    }
}

// **–ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó**
export async function sendTransaction(toAddress, amount) {
    if (!wallet || !userAddress) {
        console.error("‚ùå –ì–∞–º–∞–Ω–µ—Ü—å –Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ!");
        return;
    }

    try {
        const seqno = await wallet.methods.seqno().call();
        const transfer = wallet.methods.transfer({
            secretKey: new Uint8Array([]), // ‚ùó –¢—É—Ç –º–∞—î –±—É—Ç–∏ –ø—ñ–¥–ø–∏—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            toAddress: toAddress,
            amount: TonWeb.utils.toNano(amount),
            seqno
        });

        await transfer.send();
        console.log(`‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞: ${amount} TON ‚Üí ${toAddress}`);
    } catch (error) {
        console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó:", error);
    }
}

// **–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –≥–∞–º–∞–Ω—Ü—è**
export function checkWalletConnection() {
    if (userAddress) {
        console.log("‚úÖ –ì–∞–º–∞–Ω–µ—Ü—å –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ:", userAddress.toString(true, true, true));
        return userAddress.toString(true, true, true);
    } else {
        console.log("‚ùå –ì–∞–º–∞–Ω–µ—Ü—å –Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ");
        return null;
    }
}
