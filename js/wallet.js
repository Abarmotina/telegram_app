// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ TonWeb –¥–ª—è mainnet
const tonweb = new TonWeb();

let wallet;
let userAddress = null;

function logMessage(message) {
    const logContainer = document.getElementById("debug-log");
    if (logContainer) {
        logContainer.innerHTML += `<p>${message}</p>`;
    }
}

function logError(message) {
    const logContainer = document.getElementById("debug-log");
    if (logContainer) {
        logContainer.innerHTML += `<p style="color:red;">‚ùå ${message}</p>`;
    }
}


// **–§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –≥–∞–º–∞–Ω—Ü—è**
export async function connectWallet() {
    logMessage("üîÑ –ü–æ—á–∏–Ω–∞—î–º–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –≥–∞–º–∞–Ω—Ü—è...");

    if (!window.Telegram || !window.Telegram.WebApp) {
        logMessage("‚ùå Telegram Web App –ù–ï —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π!");
        return;
    } else {
        logMessage("‚úÖ Telegram Web App —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π!");
    }

    try {
        if (!window.Telegram.WebApp.initDataUnsafe?.user) {
            logMessage("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –ù–ï –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π —É Telegram Web App!");
            return;
        }

        const tgUserId = window.Telegram.WebApp.initDataUnsafe.user.id;
        logMessage(`üÜî ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: ${tgUserId}`);

        // **–û—Ç—Ä–∏–º—É—î–º–æ –ø—É–±–ª—ñ—á–Ω–∏–π –∫–ª—é—á –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞**
        const publicKey = await getPublicKeyFromTelegram(tgUserId);
        if (!publicKey) {
            logMessage("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø—É–±–ª—ñ—á–Ω–∏–π –∫–ª—é—á Telegram Wallet!");
            return;
        }
        if (!publicKey || publicKey.length % 2 !== 0) {
            logError("‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –ø—É–±–ª—ñ—á–Ω–∏–π –∫–ª—é—á! –î–æ–≤–∂–∏–Ω–∞ –º–∞—î –±—É—Ç–∏ –ø–∞—Ä–Ω–æ—é.");
            return;
        }
        logMessage(`üîë –û—Ç—Ä–∏–º–∞–Ω–æ –ø—É–±–ª—ñ—á–Ω–∏–π –∫–ª—é—á: ${publicKey}`);
        

        // **–°—Ç–≤–æ—Ä—é—î–º–æ –æ–±'—î–∫—Ç –≥–∞–º–∞–Ω—Ü—è**
        logMessage(`üõ† –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–æ–≥–æ –∫–ª—é—á–∞: "${publicKey}" (–¥–æ–≤–∂–∏–Ω–∞: ${publicKey.length})`);
        if (publicKey.length % 2 !== 0) {
            logError("‚ùå –ü–æ–º–∏–ª–∫–∞: –¥–æ–≤–∂–∏–Ω–∞ –ø—É–±–ª—ñ—á–Ω–æ–≥–æ –∫–ª—é—á–∞ –ù–ï —î –ø–∞—Ä–Ω–æ—é!");
            return;
        }
        wallet = new tonweb.wallet.create({
            publicKey: TonWeb.utils.hexToBytes(publicKey),
            workchain: 0
        });
        
        try {
            logMessage("üõ† –û—Ç—Ä–∏–º—É—î–º–æ –∞–¥—Ä–µ—Å—É –≥–∞–º–∞–Ω—Ü—è...");
            userAddress = await wallet.getAddress();
            logMessage(`‚úÖ –ê–¥—Ä–µ—Å–∞ –≥–∞–º–∞–Ω—Ü—è: ${userAddress.toString(true, true, true)}`);
        } catch (err) {
            logError("–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–¥—Ä–µ—Å–∏ –≥–∞–º–∞–Ω—Ü—è: " + err?.message);
        }
    } catch (error) {
        logError(`–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –≥–∞–º–∞–Ω—Ü—è: ${error?.message || "–Ω–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞"}`);
        logError(`–î–µ—Ç–∞–ª—ñ: ${JSON.stringify(error)}`);
    }
}


async function getPublicKeyFromTelegram() {
    try {
        const response = await fetch("https://wallet.tg/api/user_key", {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        });

        const data = await response.json();

        if (!data || !data.public_key) {
            logError("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø—É–±–ª—ñ—á–Ω–∏–π –∫–ª—é—á –∑ Telegram Wallet API!");
            return null;
        }

        logMessage(`üîë –û—Ç—Ä–∏–º–∞–Ω–æ —Ä–µ–∞–ª—å–Ω–∏–π –ø—É–±–ª—ñ—á–Ω–∏–π –∫–ª—é—á: ${data.public_key}`);
        return data.public_key;
    } catch (error) {
        logError("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∫–ª—é—á–∞ –∑ Telegram Wallet API: " + error.message);
        return null;
    }
}


// **–û—Ç—Ä–∏–º–∞—Ç–∏ –±–∞–ª–∞–Ω—Å –≥–∞–º–∞–Ω—Ü—è**
export async function getWalletBalance() {
    if (!wallet || !userAddress) {
        logMessage("‚ùå –ì–∞–º–∞–Ω–µ—Ü—å –Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ!");
        return null;
    }

    try {
        const balance = await tonweb.getBalance(userAddress);
        logMessage("üí∞ –ë–∞–ª–∞–Ω—Å –≥–∞–º–∞–Ω—Ü—è:", TonWeb.utils.fromNano(balance), "TON");
        return TonWeb.utils.fromNano(balance);
    } catch (error) {
        logMessage("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É:", error);
        return null;
    }
}

// **–ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó**
export async function sendTransaction(toAddress, amount) {
    if (!wallet || !userAddress) {
        logMessage("‚ùå –ì–∞–º–∞–Ω–µ—Ü—å –Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ!");
        return;
    }

    try {
        const seqno = await wallet.methods.seqno().call();
        const transfer = wallet.methods.transfer({
            secretKey: new Uint8Array([]), // ‚ùó –¢—É—Ç –º–∞—î –±—É—Ç–∏ –ø—ñ–¥–ø–∏—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            toAddress: toAddress,
            amount: TonWeb.utils.toNano(amount),
            seqno
        });

        await transfer.send();
        logMessage(`‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞: ${amount} TON ‚Üí ${toAddress}`);
    } catch (error) {
        logMessage("‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó:", error);
    }
}

// **–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –≥–∞–º–∞–Ω—Ü—è**
export function checkWalletConnection() {
    if (userAddress) {
        logMessage("‚úÖ –ì–∞–º–∞–Ω–µ—Ü—å –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ:", userAddress.toString(true, true, true));
        return userAddress.toString(true, true, true);
    } else {
        logMessage("‚ùå –ì–∞–º–∞–Ω–µ—Ü—å –Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ");
        return null;
    }
}
